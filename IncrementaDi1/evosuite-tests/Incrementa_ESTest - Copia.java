/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 21 09:56:37 GMT 2024
 */

 import org.junit.runner.RunWith;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import java.util.NoSuchElementException;
 
 @RunWith(EvoRunner.class)
 @EvoRunnerParameters(
     mockJVMNonDeterminism = true,
     useVFS = true,
     useVNET = true,
     resetStaticState = true,
     separateClassLoader = true
 )
 public class Incrementa_ESTest extends Incrementa_ESTest_scaffolding {
 
     // Test for handling input from System.in
     @Test(timeout = 4000)
     public void testMainWithSystemInput() throws Throwable {
         SystemInUtil.addInputLine("6 deXD8%7r");
         String[] inputArray = new String[0];
         
         Incrementa.main(inputArray);
         
         assertEquals("Input array should remain empty.", 0, inputArray.length);
     }
 
     // Test for incrementing a negative number
     @Test(timeout = 4000)
     public void testIncrementNegativeNumber() throws Throwable {
         int result = Incrementa.incremento(-1);
         assertEquals("Incrementing -1 should return 0.", 0, result);
     }
 
     // Test for incrementing zero
     @Test(timeout = 4000)
     public void testIncrementZero() throws Throwable {
         int result = Incrementa.incremento(0);
         assertEquals("Incrementing 0 should return 1.", 1, result);
     }
 
     // Test for incrementing a large negative number
     @Test(timeout = 4000)
     public void testIncrementLargeNegativeNumber() throws Throwable {
         int result = Incrementa.incremento(-251);
         assertEquals("Incrementing -251 should return -250.", -250, result);
     }
 
     // Test for main method with an empty input array
     @Test(timeout = 4000)
     public void testMainWithEmptyInputArray() throws Throwable {
         String[] inputArray = new String[5];
         
         // Expecting an exception when no input is provided
         try {
             Incrementa.main(inputArray);
             fail("Expected NoSuchElementException was not thrown.");
         } catch (NoSuchElementException e) {
             verifyException("java.util.Scanner", e);
         }
     }
 
     // Test for creating an instance of Incrementa (constructor test)
     @Test(timeout = 4000)
     public void testIncrementaConstructor() throws Throwable {
         Incrementa incrementa = new Incrementa();
         assertNotNull("Instance of Incrementa should not be null.", incrementa);
     }
 }
 